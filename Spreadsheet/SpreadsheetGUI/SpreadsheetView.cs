
/// <summary>
///   Original Author: Joe Zachary
///   Further Authors: H. James de St. Germain
///   
///   Dates          : 2012-ish - Original 
///                    2020     - Updated for use with ASP Core
///                    
///   This code represents a Windows Form element for a Spreadsheet. It includes
///   a Menu Bar with two operations (close/new) as well as the GRID of the spreadsheet.
///   The GRID is a separate class found in SpreadsheetGridWidget
///   
///   This code represents manual elements added to the GUI as well as the ability
///   to show a pop up of information, and the event handlers for a New window and to Close the window.
///
///   See the SimpleSpreadsheetGUIExample.Designer.cs for "auto-generated" code.
///   
///   This code relies on the SpreadsheetPanel "widget"
///  
/// </summary>

using SpreadsheetGrid_Framework;
using System;
using System.Drawing;
using System.Windows.Forms;
using SS;
using System.Collections.Generic;
using System.IO;
using System.Diagnostics;
using SpreadsheetUtilities;
using System.ComponentModel;

/// <summary> 
/// Author:    Brian Dong and Jack Machara
/// Partner:   None
/// Date:      2/27/2020
/// Course:    CS 3500, University of Utah, School of Computing 
/// Copyright: CS 3500 and Brian Dong - This work may not be copied for use in Academic Coursework. 
/// 
/// I, Brian Dong and Jach Machara, certify that I wrote this code from scratch and did not copy it in part or whole from  
/// another source, besides the provided starter gui code that may be credited as such.
/// Original Author: Joe Zachary
///   Further Authors: H. James de St. Germain
///   
///   Dates          : 2012-ish - Original 
///                    2020     - Updated for use with ASP Core
/// All references used in the completion of the assignment are cited in my README file. 
/// 
/// Provides a gui interface for a spreadsheet, and ensuring its general functionality/support
/// </summary>
namespace SpreadsheetGUI
{
    public partial class SpreadsheetView : Form
    {
        /// <summary>
        /// Spreadsheet object that stores all of the data for the spreadsheet display
        /// </summary>
        private Spreadsheet SpreadsheetContents;

        /// <summary>
        /// Name of spreadsheet file
        /// </summary>
        private string Filename;

        /// <summary>
        /// Flag used to track a specific worker condition
        /// </summary>
        private bool CircleExcep = false;

        public SpreadsheetView()
        {
            // Initializes spreadsheet object that stores the data for this spreadsheet
            SpreadsheetContents = new Spreadsheet(s => true, s => s.ToUpper(), "six");
            this.grid_widget = new SpreadsheetGridWidget();
            this.Filename = "";
            // Call the AutoGenerated code
            InitializeComponent();

            // Add event handler and select a start cell
            grid_widget.SelectionChanged += DisplaySelection;
            grid_widget.SetSelection(0, 0, false);

        }

        /// <summary>
        /// Given a spreadsheet, find the current selected cell and
        /// create a popup that contains the information from that cell
        /// </summary>
        /// <param name="ss"></param>
        private void DisplaySelection(SpreadsheetGridWidget ss)
        {
            int row, col;

            string value;
            ss.GetSelection(out col, out row);
            ss.GetValue(col, row, out value);
        }

        // Deals with the New menu
        private void NewToolStripMenuItem_Click(object sender, EventArgs e)
        {
            // Tell the application context to run the form on the same
            // thread as the other forms.
            Spreadsheet_Window.getAppContext().RunForm(new SpreadsheetView());
        }

        // Deals with the Close menu
        private void CloseToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (SpreadsheetContents.Changed)
            {
                if (MessageBox.Show("Would you like to save before quitting?", "", MessageBoxButtons.YesNo) == DialogResult.No)
                    Close();
                else
                {
                    SaveSpreadSheet();
                    Close();
                }
            }

        }
        //Deals with the close button (x) in the top right corner of the page
        private void SpreadsheetClose(object sender, FormClosingEventArgs e)
        {
            if (SpreadsheetContents.Changed)
            {
                if (MessageBox.Show("Would you like to save before quitting?", "", MessageBoxButtons.YesNo) == DialogResult.No)
                    Close();
                else
                {
                    SaveSpreadSheet();
                    Close();
                }

            }
        }

        /// <summary>
        /// Textbox handler
        /// </summary>
        /// <param name="sender"> the textbox </param>
        /// <param name="e">not used</param>
        private void input_textbox_TextChanged(object sender, EventArgs e)
        {
            TextBox box = sender as TextBox;
            grid_widget.GetSelection(out prevCol, out prevRow);
            grid_widget.SetValue(prevCol, prevRow, box.Text);
            prevContents = box.Text;
        }

        /// <summary>
        /// Fields used to store previous cell information
        /// Used to add cells to spreadsheet after done with input
        /// </summary>
        private int prevCol = 0;
        private int prevRow = 0;
        private string prevContents = "";

        /// <summary>
        /// Assumes that when the grid widget's selection changes, the inputed value is fiinalized and may be added to
        /// the spreadsheet. Done with a Background Worker
        /// </summary>
        /// <param name="sender"></param>
        private void grid_widget_SelectionChanged(SpreadsheetGridWidget sender)
        {
            input_textbox.Focus();
            // If busy, do not run again
            if (BGWorker.IsBusy)
            {
                input_textbox.Text = "Computing";
                return;
            }
                BGWorker.RunWorkerAsync();

        }

        /// <summary>
        /// Done by the background worker, adds cell to spreadsheet
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void CalculateCells(object sender, DoWorkEventArgs e)
        {
            try
            {
                e.Result = SpreadsheetContents.SetContentsOfCell(getCellName(prevCol, prevRow), prevContents);
            }
            // Catches and stores that circular dependency was created
            catch (CircularException)
            {
                CircleExcep = true;
                e.Result = new string[0];
            }
            // Catches any other error
            catch (Exception)
            {
                e.Result = SpreadsheetContents.SetContentsOfCell(getCellName(prevCol, prevRow), "#Error");
            }
        }

        /// <summary>
        /// Detects when background worker is done, updates GUI as required
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void compute_done(object sender, RunWorkerCompletedEventArgs e)
        {
            UpdateGUI((IEnumerable<string>)e.Result);
        }

        /// <summary>
        /// Updates the gui after adding a cell by using its return of modified cells
        /// </summary>
        /// <param name="ChangedCells"></param>
        private void UpdateGUI(IEnumerable<string> ChangedCells)
        {

            grid_widget.GetSelection(out int col, out int row);
            // Sets to empty if there is a circular dependency
            if (CircleExcep)
            {
                MessageBox.Show("Infinite loop created! Cannot add value to cell", "Oops");
                grid_widget.SetValue(prevCol, prevRow, "");
                input_textbox.Text = SpreadsheetContents.GetCellContents(getCellName(col, row)).ToString();
                CellName.Text = getCellName(col, row);
                CellValue.Text = SpreadsheetContents.GetCellValue(getCellName(col, row)).ToString();
                CircleExcep = false;
            }
            // Updates display as required
            else
            {
                string prevCellName = getCellName(prevCol, prevRow);
                int[] Coord;
                //Recalculates Dependents
                foreach (string dependent in ChangedCells)
                {
                    Coord = getCellCoord(dependent);
                    grid_widget.SetValue(Coord[0], Coord[1], CellValueString(dependent));
                }
                string valueString = CellValueString(prevCellName);

                grid_widget.SetValue(prevCol, prevRow, valueString);
                input_textbox.Text = SpreadsheetContents.GetCellContents(getCellName(col, row)).ToString();
                CellName.Text = getCellName(col, row);
                CellValue.Text = SpreadsheetContents.GetCellValue(getCellName(col, row)).ToString();

            }
        }

        /// <summary>
        /// Returns the string to set the cells value to
        /// </summary>
        /// <param name="cellName">cell that has it's value returned</param>
        /// <returns></returns>
        private string CellValueString(string cellName)
        {
            string valueString;
            object pastValue = SpreadsheetContents.GetCellValue(cellName);
            if (pastValue is FormulaError)
                valueString = "#Error";
            else
                valueString = pastValue.ToString();
            return valueString;
        }
        /// <summary>
        /// Returns the name of the cell from the Column and Row
        /// </summary>
        /// <param name="col">Column of Cell</param>
        /// <param name="row">Row of Cell</param>
        /// <returns></returns>
        private string getCellName(int col, int row)
        {
            string letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            return letters[col].ToString() + (row + 1).ToString();

        }

        /// <summary>
        /// Returns the row and column of the cell from the cell name
        /// </summary>
        /// <param name="CellName">Name of the cell</param>
        /// <returns>int array of with the coordinants of the cell</returns>
        private int[] getCellCoord(string CellName)
        {
            int[] Coord = new int[2];
            string letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            Coord[0] = letters.IndexOf(CellName[0]);
            Coord[1] = int.Parse(CellName[1..]) - 1;
            return Coord;
        }

        /// <summary>
        /// Displays info for adding to cells in the spreadsheet from the help menu
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void addingToolStripMenuItem_Click(object sender, EventArgs e)
        {
            MessageBox.Show("Click on any cell to select it and then type\nin the contents box to edit its value. \n\n" +
                "You may enter text, positive numbers, and formulas.\nA formula is denoted by starting the input with =\n" +
                "Formulas may contain references to other cells using\ntheir names as such A1.\nNote: These names are not case sensitive.\n" +
                "When a formula references a cell that cannot be used\nto calculate a value in its current state #Error\nwill be displayed." +
                " This will be immediately changed\nwhen the dependent cell is changed\nto a value that may be used to calculate.\n\nWhen a" +
                "formula is made such that cells are\ndependent upon each other in an infinite loop,\na popup error will be displayed" +
                "and the\noffending cell's value will be cleared\n\nHitting enter will add the contents to the cell and move the selection" +
                "down by one.\nHitting Tab will add the contents to the current cell and move the selection to the right by one.",
                "Adding to Cells Help");
        }

        /// <summary>
        /// Displays info for saving in the spreadsheet from the help menu
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void savingToolStripMenuItem_Click(object sender, EventArgs e)
        {
            MessageBox.Show("If a new spreadsheet has not been saved before then save and save as\nbehave the same. If the spreadsheet has" +
                "been saved at least once,\nbuttons behave as following:\nSave As opens a file explorer and lests you save the file to a new " +
                "location\n\nSave simply saves to the old location\n\nAll Spreadsheet files have a .sprd extension\n\nPressing Control + S will " +
                "Save the current spreadsheet\nPressing Control + Shift + S will SaveAs the current spreadsheet",
                "Saving Help");
        }

        /// <summary>
        /// Displays info for loading in the spreadsheet from the help menu
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void loadingToolStripMenuItem_Click(object sender, EventArgs e)
        {
            MessageBox.Show("File Open allows you to load existing spreadsheet files.\nDisplays an error if there are issues with reading or " +
                "there is a version\nmismatch.\n\nFiles must have extension .sprd, and this version works with\nboth element and attribute formats.",
                "Loading Help");
        }

        /// <summary>
        /// Called if the Save button is pressed, if the file has been saved already it saves in the same spot, if not it calls SaveSpreadSheet
        /// </summary>
        /// <param name="sender">Event Sender</param>
        /// <param name="e">Event argument</param>
        private void saveToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (this.Filename != "")
            {
                SpreadsheetContents.Save(this.Filename);
            }
            else
            {
                SaveSpreadSheet();
            }

        }
        /// <summary>
        /// Called if the SaveAs button is pressed, calls SaveSpreadsheet
        /// </summary>
        /// <param name="sender">Event sender</param>
        /// <param name="e">Event argument</param>
        private void SaveAsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SaveSpreadSheet();
        }
        /// <summary>
        /// Saves the spreadsheet to a selected file location
        /// </summary>
        private void SaveSpreadSheet()
        {
            SaveFileDialog saveSpreadsheetDialog = new SaveFileDialog();
            saveSpreadsheetDialog.Filter = "Spreadsheet|*.sprd";
            saveSpreadsheetDialog.Title = "Save the Spreadsheet";
            saveSpreadsheetDialog.ShowDialog();
            if (saveSpreadsheetDialog.FileName != "")
            {
                if (File.Exists(saveSpreadsheetDialog.FileName))
                {
                    if (MessageBox.Show("Would you like to override the Saved File", "Caution", MessageBoxButtons.YesNo) == DialogResult.Yes)
                    {
                        this.Filename = saveSpreadsheetDialog.FileName;
                        SpreadsheetContents.Save(saveSpreadsheetDialog.FileName);
                    }

                }
                else
                {
                    this.Filename = saveSpreadsheetDialog.FileName;
                    SpreadsheetContents.Save(saveSpreadsheetDialog.FileName);
                }
            }
        }
        /// <summary>
        /// Opens the file explorer and allows the user to select a file to open, if the file is invalid in any way a 
        /// message will pop up informing them. 
        /// </summary>
        /// <param name="sender">Event sender</param>
        /// <param name="e">event argument</param>
        private void OpenToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                OpenFileDialog OpenSpreadsheetDialog = new OpenFileDialog();
                OpenSpreadsheetDialog.Filter = "All Files (*.sprd*)|*.sprd*";
                OpenSpreadsheetDialog.FilterIndex = 1;
                OpenSpreadsheetDialog.Multiselect = false;

                if (OpenSpreadsheetDialog.ShowDialog() == DialogResult.OK)
                {
                    string newFileName = OpenSpreadsheetDialog.FileName;
                    if (SpreadsheetContents.Changed)
                    {
                        if (MessageBox.Show("Would you like to save your unsaved work?", "", MessageBoxButtons.YesNo) == DialogResult.Yes)
                            SaveSpreadSheet();

                    }
                    this.SpreadsheetContents = new Spreadsheet(newFileName, s => true, s => s.ToUpper(), "six");
                    this.Filename = newFileName;
                    int[] Coord;
                    grid_widget.Clear();
                    foreach (string cell in this.SpreadsheetContents.GetNamesOfAllNonemptyCells())
                    {
                        Coord = getCellCoord(cell);
                        grid_widget.SetValue(Coord[0], Coord[1], SpreadsheetContents.GetCellValue(cell).ToString());
                    }
                    grid_widget.SetSelection(0, 0, false);
                    input_textbox.Text = SpreadsheetContents.GetCellContents("A1").ToString();
                    CellValue.Text = SpreadsheetContents.GetCellValue("A1").ToString();
                    CellName.Text = "A1";
                }
            }
            catch
            {
                MessageBox.Show("Invalid File. Please check your version/format", "Error Reading");
            }
        }

        /// <summary>
        /// Overriding Process CMD to move around the spreadsheet with arrow keys
        /// </summary>
        /// <param name="msg">Windows message</param>
        /// <param name="keyData">Key(s) being pressed</param>
        /// <returns></returns>
        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        {
            if (keyData == (Keys.Control | Keys.S))
            {
                if (this.Filename != "")
                    SpreadsheetContents.Save(this.Filename);
                else
                    SaveSpreadSheet();
                return true;
            }
            else if (keyData == (Keys.Tab))
            {
                MoveRight();
                return true;
            }
            else if (keyData == (Keys.Enter))
            {
                MoveDown();
                return true;
            }
            else if (keyData == (Keys.Control |Keys.Shift| Keys.S))
            {
                SaveSpreadSheet();
                return true;
            }
            else if (keyData == (Keys.Control | Keys.N))
            {
                //creates a new spreadsheet
                Spreadsheet_Window.getAppContext().RunForm(new SpreadsheetView());

            }
            else if (keyData == Keys.Down)
            {
                MoveDown();

            }
            else if (keyData == Keys.Up)
            {
                MoveUp();

            }
            else if (keyData == Keys.Right)
            {
                MoveRight();

            }
            else if (keyData == Keys.Left)
            {
                MoveLeft();

            }
            return base.ProcessCmdKey(ref msg, keyData);
        }
        /// <summary>
        /// Moves the selected cell down one, it it reaches the bottom of the spreadsheet, it loops back to the top
        /// </summary>
        private void MoveDown()
        {
            grid_widget.GetSelection(out int col, out int row);
            if (row < 98)
            {
                grid_widget.SetSelection(col, (row + 1));
            }
            else
            {
                grid_widget.SetSelection(col, 0);
            }
        }
        /// <summary>
        /// Moves the selected cell up one, it it reaches the top of the spreadsheet, it loops back to the bottom
        /// </summary>
        private void MoveUp()
        {
            grid_widget.GetSelection(out int col, out int row);
            if (row > 0)
            {
                grid_widget.SetSelection(col, (row - 1));
            }
            else
            {
                grid_widget.SetSelection(col, 98);
            }
        }
        /// <summary>
        /// Moves the selected cell to the left one, if it reaches the first column of the spreadsheet, it loops back to the last column
        /// </summary>
        private void MoveLeft()
        {
            grid_widget.GetSelection(out int col, out int row);
            if (col > 0)
            {
                grid_widget.SetSelection((col - 1), row);
            }
            else
            {
                grid_widget.SetSelection(25, row);
            }
        }
        /// <summary>
        /// Moves the selected cell to the right one, if it reaches the last column of the spreadsheet, it loops back to the first column
        /// </summary>
        private void MoveRight()
        {
            grid_widget.GetSelection(out int col, out int row);
            if (col < 25)
            {
                grid_widget.SetSelection((col + 1), row);
            }
            else
            {
                grid_widget.SetSelection(0, row);
            }
        }
    }
}
